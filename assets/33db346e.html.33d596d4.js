import{_ as t,r as p,o as e,c as o,b as s,d as c,e as n,a as l}from"./app.9a9cc1a2.js";const i={},r={id:"\u6709\u6548\u7684\u62EC\u53F7",tabindex:"-1"},u=s("a",{class:"header-anchor",href:"#\u6709\u6548\u7684\u62EC\u53F7","aria-hidden":"true"},"#",-1),k=n(),d={href:"https://leetcode.cn/problems/valid-parentheses/",target:"_blank",rel:"noopener noreferrer"},v=n("\u6709\u6548\u7684\u62EC\u53F7"),m=l(`<ul><li>\u65B0\u5EFA\u4E00\u4E2A\u6808</li><li>\u626B\u63CF\u5B57\u7B26\u4E32\uFF0C\u9047\u5DE6\u62EC\u53F7\u5165\u6808\uFF0C\u9047\u548C\u6808\u9876\u62EC\u53F7\u7C7B\u578B\u5339\u914D\u7684\u53F3\u62EC\u53F7\u5C31\u51FA\u6808\uFF0C\u7C7B\u578B\u4E0D\u5339\u914D\u76F4\u63A5\u5224\u5B9A\u4E3A\u4E0D\u5408\u6CD5</li><li>\u6700\u540E \u6808\u7A7A\u4E86\u5C31\u5408\u6CD5 \u5426\u5219\u4E0D\u5408\u6CD5</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> ss <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ss <span class="token operator">===</span> <span class="token string">&quot;{&quot;</span> <span class="token operator">||</span> ss <span class="token operator">===</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">||</span> ss <span class="token operator">===</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> lastStr  <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>lastStr <span class="token operator">===</span> <span class="token string">&quot;{&quot;</span> <span class="token operator">&amp;&amp;</span> ss <span class="token operator">===</span> <span class="token string">&quot;}&quot;</span> <span class="token operator">||</span> lastStr <span class="token operator">===</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">&amp;&amp;</span> ss <span class="token operator">===</span> <span class="token string">&quot;)&quot;</span> <span class="token operator">||</span> lastStr <span class="token operator">===</span> <span class="token string">&quot;[&quot;</span> <span class="token operator">&amp;&amp;</span> ss <span class="token operator">===</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span>length

<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function b(_,h){const a=p("ExternalLinkIcon");return e(),o("div",null,[s("h2",r,[u,k,s("a",d,[v,c(a)])]),m])}var g=t(i,[["render",b],["__file","33db346e.html.vue"]]);export{g as default};
